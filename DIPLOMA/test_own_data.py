import torch
import torch.nn as nn
import torchvision.transforms as transforms
import torchvision.datasets as datasets
from torch.utils.data import DataLoader
import torchvision.models as models

# --- –ì—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ---
BATCH_SIZE = 64
MODEL_PATH = r"D:\LPNU\DIPLOMA\DIPLOMA\resnet50_custom.pth"  # –®–ª—è—Ö –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –º–æ–¥–µ–ª—ñ

# --- –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π GPU ---
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É CIFAR-10 ---
transform = transforms.Compose([
    transforms.Resize((32, 32)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2470, 0.2435, 0.2616])    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
])

test_dataset = datasets.CIFAR10(root="./data", train=False, download=True, transform=transform)
test_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ ---
def load_model(model_path, num_classes=10):
    model = models.resnet50()
    model.fc = nn.Linear(model.fc.in_features, num_classes)  # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞—Ä
    model.load_state_dict(torch.load(model_path, map_location=device))
    model.to(device)
    model.eval()  # –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º –æ—Ü—ñ–Ω–∫–∏
    return model

# --- –§—É–Ω–∫—Ü—ñ—è –æ—Ü—ñ–Ω–∫–∏ –º–æ–¥–µ–ª—ñ ---
def evaluate_model(model, dataloader):
    model.eval()
    correct, total = 0, 0

    with torch.no_grad():
        for inputs, labels in dataloader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            _, predicted = torch.max(outputs, 1)
            print(predicted)
            correct += (predicted == labels).sum().item()
            total += labels.size(0)

            # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤–∏–≤—ñ–¥ (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å)
            # if total <= 10:  # –î—Ä—É–∫—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10
            print(f"üéØ –†–µ–∞–ª—å–Ω—ñ –º—ñ—Ç–∫–∏: {labels.tolist()}")
            print(f"ü§ñ –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è: {predicted.tolist()}")

    accuracy = correct / total * 100
    print(f"‚úÖ –¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ –Ω–∞ CIFAR-10: {accuracy:.2f}%")


# --- –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ---
if __name__ == "__main__":
    model = load_model(MODEL_PATH, 3)
    evaluate_model(model, test_loader)
